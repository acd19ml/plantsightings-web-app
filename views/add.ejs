<!DOCTYPE html>
<html>
<head>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title><%= title %></title>
    <link rel='stylesheet' href='/stylesheets/add.css'/>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
<div class="container">
    <h1 class="text-center">Plant Sighting Form</h1>
    <br>
    <form action="/add" method="POST" enctype="multipart/form-data">
        <div class="row">
<!--            first column-->
            <div class="col-md-5">
<!--                nickname-->
                <div class="mb-3">
                    <label for="nickname" class="form-label">Nickname:</label>
                    <input class="form-control" type="text" id="nickname" name="nickname">
                </div>
<!--                data-->
                <div class="mb-3">
                    <label for="dateSeen" class="form-label">Date Seen:</label>
                    <input class="form-control" type="date" id="dateSeen" name="dateSeen" required>
                </div>

                <!-- Add to your existing form in the file where 'add' template is defined -->
                <div class="mb-3">
                    <label for="photo" class="form-label">Photo URL:</label>
                    <input class="form-control" type="file" name="myImg" id="myImg" accept="image/*" required>
                    <label for="photo" class="form-label">Photo:</label>
                    <video id="video" width="320" height="240" autoplay></video>
                    <button type="button" id="snap">Capture</button> <!-- Changed to type="button" -->
                    <canvas id="canvas" width="320" height="240" style="display:none;"></canvas>
                    <input type="hidden" name="photo" id="photo">
                </div>



                <!-- location-->
                <div class="mb-3">
                    <label for="location" class="form-label">Location (Longitude, Latitude):</label>
                    <div class="input-group">
                        <input class="form-control" type="text" id="location" name="location" placeholder="e.g., -73.935242, 40.730610" required>
                        <button type="button" class="btn btn-secondary" id="getLocation">Get Location</button>
                        <button type="button" class="btn btn-info" data-bs-toggle="modal" data-bs-target="#mapModal">Choose from Map</button>
                    </div>
                </div>

                <!--                identification name-->
                <div class="mb-3">
                    <label for="identificationName" class="form-label">Identification Name:</label>
                    <input class="form-control" type="text" id="identificationName" name="identificationName">
                </div>
            </div>
<!--            second column-->
            <div class="col-md-7">
                <div class="row g-3">
<!--                    height-->
                    <div class="col-sm-6">
                        <label for="height" class="form-label">Plant Height:</label>
                        <input class="form-control" type="number" id="height" name="height" step="0.01" placeholder="In meters" required>
                    </div>
<!--                    spread-->
                    <div class="col-sm-6">
                        <label for="spread" class="form-label">Plant Spread:</label>
                        <input class="form-control" type="number" id="spread" name="spread" step="0.01" placeholder="In meters" required>
                    </div>
                </div><br>
<!--                description-->
                <div class="mb-3">
                    <label for="description" class="form-label">Description:</label>
                    <textarea class="form-control" id="description" name="description" rows="5" required></textarea>
                </div>
<!--                plant characteristics-->
                <div class="mb-3">
                    <label for="plantCharacteristics" class="form-label">Plant Characteristics:</label>
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" id="flowers" name="flowers">
                        <label class="form-check-label" for="flowers">Flowers</label>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" id="leaves" name="leaves">
                        <label class="form-check-label" for="leaves">Leaves</label>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" id="fruitsOrSeeds" name="fruitsOrSeeds">
                        <label class="form-check-label" for="fruitsOrSeeds">Fruits or Seeds</label>
                    </div>
                </div>
<!--                sun exposure-->
                <div class="mb-3">
                    <label for="sunExposure" class="form-label">Sun Exposure:</label>
                    <select class="form-control" id="sunExposure" name="sunExposure">
                        <option value="full sun">Full Sun</option>
                        <option value="partial shade">Partial Shade</option>
                        <option value="full shade">Full Shade</option>
                    </select>
                </div>
            </div>
        </div>
        <button type="submit" class="btn btn-primary mt-2">Submit Form</button> <!-- Submit button for the form -->
        <a class="btn btn-outline-info" href="/" role="button">View All Plant Sightings</a>
    </form>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            var db; // Declare db at a higher scope
            var request = indexedDB.open('MyDatabase', 1);

            request.onupgradeneeded = function(event) {
                var db = event.target.result; // Assign db on upgrade or creation
                if (!db.objectStoreNames.contains('nicknames')) {
                    db.createObjectStore('nicknames', {keyPath: 'id'});
                }
            };

            request.onerror = function(event) {
                console.error("IndexedDB error:", event.target.errorCode);
            };

            request.onsuccess = function(event) {
                db = event.target.result; // Also assign db on successful opening

                var tx = db.transaction('nicknames', 'readonly');
                var store = tx.objectStore('nicknames');
                var getReq = store.get('userNickname');  // Retrieve the nickname from IndexedDB

                getReq.onsuccess = function() {
                    var nicknameInput = document.getElementById('nickname');
                    if (getReq.result) {
                        nicknameInput.value = getReq.result.nickname;
                    } else {
                        console.log('No nickname found in IndexedDB.');
                    }
                    nicknameInput.disabled = false;  // Enable input to ensure it is included in form submission
                };

                getReq.onerror = function(event) {
                    console.error('Error fetching nickname from IndexedDB:', event.target.errorCode);
                };

                tx.oncomplete = function() {
                    setupFormListener(db);
                };
            };
        });

        function setupFormListener(db) {
            var form = document.querySelector('form');
            form.addEventListener('submit', function(event) {
                event.preventDefault();
                var nickname = document.getElementById('nickname').value;

                if (nickname) {
                    var writeTx = db.transaction('nicknames', 'readwrite');
                    var writeStore = writeTx.objectStore('nicknames');
                    writeStore.put({id: 'userNickname', nickname: nickname});

                    writeTx.oncomplete = function() {
                        console.log('Nickname saved to IndexedDB.');
                        document.getElementById('nickname').disabled = false; // Ensure it's enabled before submission
                        db.close(); // Close the db only after all operations, including the write, are complete
                        form.submit(); // Now submit the form programmatically
                    };

                    writeTx.onerror = function(event) {
                        console.error('Error saving nickname to IndexedDB:', event.target.errorCode);
                    };
                } else {
                    // If the nickname is empty, submit the form directly
                    db.close(); // Ensure to close db even if not writing anything
                    form.submit();
                }
            });
        }
    </script>







</div>

<!-- Modal -->
<div class="modal fade" id="mapModal" tabindex="-1" aria-labelledby="mapModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="mapModalLabel">Select Location</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div id="map" style="height: 400px;"></div>
            </div>
        </div>
    </div>
</div>

</body>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.1/dist/js/bootstrap.bundle.min.js"></script>
<script src="/javascripts/camera.js"></script>
<script src="/javascripts/location.js"></script>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>

<script>
    async function initMap() {
        const position = { lng: -1.4818716, lat: 53.3815862 };
        map = new google.maps.Map(document.getElementById("map"), {
            zoom: 8,
            center: position,
            mapId: "DEMO_MAP_ID",
        });

        marker = new google.maps.Marker({
            position: position,
            map: map,
            draggable: true,
            title: 'Drag me!'
        });

        google.maps.event.addListener(marker, 'dragend', function() {
            const latLng = marker.getPosition();
            document.getElementById('location').value = `${latLng.lng().toFixed(6)}, ${latLng.lat().toFixed(6)}`;
        });
    }


    $('#mapModal').on('shown.bs.modal', function () {
        google.maps.event.trigger(map, 'resize');
        if (marker && typeof marker.getPosition === 'function') {
            map.setCenter(marker.getPosition());
        } else {
            console.error("Marker is not properly initialized or getPosition is not a function.");
        }
    });

</script>

<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyACCrpjG5YXtt4tCRmC4Gtb1OWqh8DRWoA&callback=initMap&v=weekly&libraries=marker" async defer></script>

</html>
